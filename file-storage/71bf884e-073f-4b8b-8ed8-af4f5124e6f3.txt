QuestionController 만들기 

 @GetMapping("/question/list")
    public String list() {
       return "question_list";

controller에서 list 불러오기 

question_list.html(질문목록페이지) 생성하기 

생성하고 <h2>Hello Template</h2> 쓰면 hello template 라는 단어가 페이지에 뜸

QuestionRepository (질문목록데이터) 생성하고

controller에서 위에 list에서 썻던 코드 수정 

private final QuestionRepository questionRepository;

    @GetMapping("/question/list")
    public String list(Model model) {
        List<Question> questionList = this.questionRepository.findAll();
        model.addAttribute("questionList", questionList);
        return "question_list";
    }

question_list.html에 가서 

<table>
    <thead>
        <tr>
            <th>제목</th>
            <th>작성일시</th>
        </tr>
    </thead>
    <tbody>
        <tr th:each="question : ${questionList}">
            <td th:text="${question.subject}"></td>
            <td th:text="${question.createDate}"></td>
        </tr>
    </tbody>
</table>

html 구조로 표시한다 .

질문목록을 출력하기위해 MainController 수정해야한다.

@GetMapping("/")
    public String root() {
        return "redirect:/question/list";
    }

그다음 서비스를 만들어야 하는데 데이터 처리를 위해 작성되는 클래스이다.

QuestionService 를 만들고 

@RequiredArgsConstructor
@Service

private final QuestionRepository questionRepository;

    public List<Question> getList() {
        return this.questionRepository.findAll();
    }

작성한다.

QuestionController  간다음 다음과 같이 추가한다 

private final QuestionService questionService;

public String list("/question/list")
List<Question> questionList = this.questionService.getList();
........

------------------------------------

질문목록에 링크 추가하기

 list_html 페이지로 들어가 

<tbody>
        <tr th:each="question, index : ${questionList}">
            <td>
                <a th:href="@{|/question/detail/${question.id}|}" th:text="${question.subject}"></a>
            </td>
            <td th:text="${question.createDate}"></td>
        </tr>
    </tbody>

추가해준다 .

QuestionController로 들어가 다음과 같이 추가해준다

import org.springframework.web.bind.annotation.PathVariable;

@GetMapping(value = "/question/detail/{id}")
    public String detail(Model model, @PathVariable("id") Integer id) {
        return "question_detail";
    }

이렇게하면 404오류대신 500번 오류 발생 question_detail.html이 없기떄문에 오류발생

templates에 디테일.html class 만들기 

<h1>제목</h1>
<div>내용</div>

화면에 출력한 제목 / 내용 문자열 대신 질문 데이터의 제목과 내용을 출력하기
먼저 제목과 내용에 들어갈 질문 데이터를 조회해보자.

QuestionService에서 

import java.util.Optional;
import com.mysite.sbb.DataNotFoundException;

 public Question getQuestion(Integer id) {  
        Optional<Question> question = this.questionRepository.findById(id);
        if (question.isPresent()) {
            return question.get();
        } else {
            throw new DataNotFoundException("question not found");
        }
    }

추가하기 

id값으로 질문 데이터를 조회하기 위해 getQquestion메서드를 추가했다. 리포지터리로 얻은
Question 객체는 optional객체 이므로 if~else문을 통해
isPresnt 메서드로 해당 데이터(여기서는 id값)가 존재한느지 검사하는 과정이 필요
만약 id값에 해당하는 질문데이터가 없을 경우에는 예외 클래스인 DataNotFoundException이 실행되도록함(컴파일오류)

com.mysite.sbb 에 DataNotFoundException  class추가하고

import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.ResponseStatus;

@ResponseStatus(value = HttpStatus.NOT_FOUND, reason = "entity not found")
public class DataNotFoundException extends RuntimeException {
    private static final long serialVersionUID = 1L;
    public DataNotFoundException(String message) {
        super(message);
    }
}

추가한다.
DataNotFoundException은 데이터베이스에서 특정 엔티티 또는 데이터를 찾을 수 없을 때 발생시키는 예외 클래스로 만들었다. 이 예외가 발생하면 스프링 부트는 설정된 HTTP 상태 코드(HttpStatus.NOT_FOUND)와 이유("entity not found")를 포함한 응답을 생성하여 클라이언트에게 반환하게 된다. 여기서는 404 오류를 반환하도록 작성했다.

QuestionController로 가서 QuestionService의 getQuestion 메서드를 호출하여 Question 객체를 템플릿에 전달할 수 있도록 다음과 같이 수정하자

@GetMapping(value = "/question/detail/{id}")
    public String detail(Model model, @PathVariable("id") Integer id) {
        Question question = this.questionService.getQuestion(id);
        model.addAttribute("question", question);
        return "question_detail";
    }

--------------------------------------------------------------
상세 페이지 출력하기

'제목'과 '내용' 문자열 대신 질문 데이터의 제목(subject)과 내용(content)을 화면에 출력해 보자.

상세 페이지 템플릿인 question_detail.html 파일로 돌아가 다음과 같이 수정

QuestionController의 detail 메서드에서 Model 객체에 'question'이라는 이름으로 Question 객체를 저장했으므로 다음과 같이 작성할 수 있다.

<h1 th:text="${question.subject}"></h1>
<div th:text="${question.content}"></div>

-----------------
url 

현재 url이 

@GetMapping("/question/list")
@GetMapping(value = "/question/detail/{id}") 이렇게 2개가 있는데 

@RequestMapping("/question") controller위에다가 쓰고  아래 question을 삭제하자

----------------------------------------

답변 기능 만들기

question_detail.html로 가서 답변 저장을 위한 form, textarea, input 요소를 다음과 같이 추가해 보자.

<form th:action="@{|/answer/create/${question.id}|}" method="post">
    <textarea name="content" id="content" rows="15"></textarea>
    <input type="submit" value="답변등록">
</form>

답변 등록] 버튼을 누르면 전송되는 form의 action은 타임리프의 th:action 속성으로 생성한다. 이제 텍스트 창에 답변을 작성하고, 답변 등록 버튼을 클릭하면 /answer/create/2(여기서 ‘2’는 질문 데이터의 고유 번호를 의미한다.)와 같은 URL이 post 방식으로 호출될 것이다.

com.mysite.sbb.answer  가서 AnswerController 만들자

import com.mysite.sbb.question.Question;
import com.mysite.sbb.question.QuestionService;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

@RequestMapping("/answer")
@RequiredArgsConstructor
@Controller
public class AnswerController {

    private final QuestionService questionService;

    @PostMapping("/create/{id}")
    public String createAnswer(Model model, @PathVariable("id") Integer id, @RequestParam(value="content") String content) {
        Question question = this.questionService.getQuestion(id);
        // TODO: 답변을 저장한다. 
        return String.format("redirect:/question/detail/%s", id);
    }
}

AnswerService를 만들고 

import com.mysite.sbb.question.Question;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;

@RequiredArgsConstructor
@Service
public class AnswerService {

    private final AnswerRepository answerRepository;


    public void create(Question question, String content) {
        Answer answer = new Answer();
        answer.setContent(content);
        answer.setCreateDate(LocalDateTime.now());
        answer.setQuestion(question);
        this.answerRepository.save(answer);
    }
}

nswerService에는 답변(Answer)을 생성하기 위해 create 메서드를 추가했다. create 메서드는 입력받은 2개의 매개변수인 question과 content를 사용하여 Answer 객체를 생성하여 저장했다.

AnswerController로 가서 
Question question = this.questionService.getQuestion(id);
        this.answerService.create(question, content);
        return String.format("redirect:/question/detail/%s", id);
    } 수정하자 

----------------------------

상세페이지에 답변 표시하기 
question_detail.html가서 

<h5 th:text="|${#lists.size(question.answerList)}개의 답변이 있습니다.|"></h5>
<div>
    <ul>
        <li th:each="answer : ${question.answerList}" th:text="${answer.content}"></li>
    </ul>
</div>

추가하자 

---------------------------

웹페이지 디자인하기 

즉 CSS 파일은 HTML 파일과 달리 스태틱(static) 디렉터리에 저장해야 한다. 스프링 부트의 스태틱 디렉터리는 다음과 같이 src/main/resources 디렉터리 안에 있다.

static파일 클릭후 file 생성하고 이름.css 만들자 

textarea {
    width:100%;
}

input[type=submit] {
    margin-top:10px;
}

이러고 question_detail에 style.css를 임포트 해보자 

<link rel="stylesheet" type="text/css" th:href="@{/style.css}">

텍스트 창의 넓이가 넓어지고 [답변 등록] 버튼 위에 여백이 생겨 한층 보기 편해졌다.

===================================




